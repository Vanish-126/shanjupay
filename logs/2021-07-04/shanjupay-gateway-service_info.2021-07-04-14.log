[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,356 DEBUG [http-nio-56010-exec-1][HttpServletRequestWrapper.java:229] - Path = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,357 DEBUG [http-nio-56010-exec-1][HttpServletRequestWrapper.java:230] - Transfer-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,358 DEBUG [http-nio-56010-exec-1][HttpServletRequestWrapper.java:231] - Content-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,358 DEBUG [http-nio-56010-exec-1][HttpServletRequestWrapper.java:232] - Content-Length header = -1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,564 DEBUG [http-nio-56010-exec-1][ZoneAffinityServerListFilter.java:83] - ZoneAffinity is set to false
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,565 DEBUG [http-nio-56010-exec-1][ZoneAffinityServerListFilter.java:93] - activeReqeustsPerServerThreshold: 0.6
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,565 DEBUG [http-nio-56010-exec-1][ZoneAffinityServerListFilter.java:95] - blackOutServerPercentageThreshold: 0.8
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,566 DEBUG [http-nio-56010-exec-1][ZoneAffinityServerListFilter.java:97] - availableServersThreshold: 2
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,590 INFO [http-nio-56010-exec-1][ChainedDynamicProperty.java:115] - Flipping property: transaction-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,623 DEBUG [http-nio-56010-exec-1][BaseLoadBalancer.java:338] - LoadBalancer [transaction-service]:  pingIntervalSeconds set to 30
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,623 DEBUG [http-nio-56010-exec-1][BaseLoadBalancer.java:356] - LoadBalancer [transaction-service]: maxTotalPingTime set to 2
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,624 INFO [http-nio-56010-exec-1][BaseLoadBalancer.java:197] - Client: transaction-service instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=transaction-service,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,635 INFO [http-nio-56010-exec-1][DynamicServerListLoadBalancer.java:222] - Using serverListUpdater PollingServerListUpdater
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,672 DEBUG [http-nio-56010-exec-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,672 DEBUG [http-nio-56010-exec-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,673 DEBUG [http-nio-56010-exec-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,673 DEBUG [http-nio-56010-exec-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,683 DEBUG [http-nio-56010-exec-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,685 INFO [http-nio-56010-exec-1][ChainedDynamicProperty.java:115] - Flipping property: transaction-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,685 DEBUG [http-nio-56010-exec-1][BaseLoadBalancer.java:147] - LoadBalancer [transaction-service_unknown]:  initialized
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,686 DEBUG [http-nio-56010-exec-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,687 DEBUG [http-nio-56010-exec-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,688 INFO [http-nio-56010-exec-1][DynamicServerListLoadBalancer.java:150] - DynamicServerListLoadBalancer for client transaction-service initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=transaction-service,current list of Servers=[192.168.1.6:56050],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.1.6:56050;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@642886a1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,745 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.circuitBreaker.enabled to use NEXT property: hystrix.command.default.circuitBreaker.enabled = true
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,747 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.circuitBreaker.requestVolumeThreshold to use NEXT property: hystrix.command.default.circuitBreaker.requestVolumeThreshold = 20
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,747 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.circuitBreaker.sleepWindowInMilliseconds to use NEXT property: hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds = 5000
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,748 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.circuitBreaker.errorThresholdPercentage to use NEXT property: hystrix.command.default.circuitBreaker.errorThresholdPercentage = 50
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,749 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.circuitBreaker.forceOpen to use NEXT property: hystrix.command.default.circuitBreaker.forceOpen = false
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,749 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.circuitBreaker.forceClosed to use NEXT property: hystrix.command.default.circuitBreaker.forceClosed = false
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,751 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:90] - Flipping property: hystrix.command.transaction-service.execution.isolation.strategy to use its current value: SEMAPHORE
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,752 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:90] - Flipping property: hystrix.command.transaction-service.execution.isolation.thread.timeoutInMilliseconds to use its current value: 93000
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,752 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.execution.timeout.enabled to use NEXT property: hystrix.command.default.execution.timeout.enabled = true
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,753 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.execution.isolation.thread.interruptOnTimeout to use NEXT property: hystrix.command.default.execution.isolation.thread.interruptOnTimeout = true
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,753 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.execution.isolation.thread.interruptOnFutureCancel to use NEXT property: hystrix.command.default.execution.isolation.thread.interruptOnFutureCancel = false
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,753 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:90] - Flipping property: hystrix.command.transaction-service.execution.isolation.semaphore.maxConcurrentRequests to use its current value: 100
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,754 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.fallback.isolation.semaphore.maxConcurrentRequests to use NEXT property: hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests = 10
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,754 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.fallback.enabled to use NEXT property: hystrix.command.default.fallback.enabled = true
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,755 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.metrics.rollingStats.timeInMilliseconds to use NEXT property: hystrix.command.default.metrics.rollingStats.timeInMilliseconds = 10000
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,755 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.metrics.rollingStats.numBuckets to use NEXT property: hystrix.command.default.metrics.rollingStats.numBuckets = 10
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,756 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.metrics.rollingPercentile.enabled to use NEXT property: hystrix.command.default.metrics.rollingPercentile.enabled = true
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,757 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.metrics.rollingPercentile.timeInMilliseconds to use NEXT property: hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds = 60000
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,757 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.metrics.rollingPercentile.numBuckets to use NEXT property: hystrix.command.default.metrics.rollingPercentile.numBuckets = 6
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,758 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.metrics.rollingPercentile.bucketSize to use NEXT property: hystrix.command.default.metrics.rollingPercentile.bucketSize = 100
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,758 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.metrics.healthSnapshot.intervalInMilliseconds to use NEXT property: hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds = 500
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,759 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.requestCache.enabled to use NEXT property: hystrix.command.default.requestCache.enabled = true
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,759 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.transaction-service.requestLog.enabled to use NEXT property: hystrix.command.default.requestLog.enabled = true
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,883 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.threadpool.RibbonCommand.allowMaximumSizeToDivergeFromCoreSize to use NEXT property: hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize = false
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,884 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.threadpool.RibbonCommand.coreSize to use NEXT property: hystrix.threadpool.default.coreSize = 10
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,884 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.threadpool.RibbonCommand.maximumSize to use NEXT property: hystrix.threadpool.default.maximumSize = 10
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,885 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.threadpool.RibbonCommand.keepAliveTimeMinutes to use NEXT property: hystrix.threadpool.default.keepAliveTimeMinutes = 1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,885 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.threadpool.RibbonCommand.maxQueueSize to use NEXT property: hystrix.threadpool.default.maxQueueSize = -1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,886 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.threadpool.RibbonCommand.queueSizeRejectionThreshold to use NEXT property: hystrix.threadpool.default.queueSizeRejectionThreshold = 5
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,887 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.threadpool.RibbonCommand.metrics.rollingStats.timeInMilliseconds to use NEXT property: hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds = 10000
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:01,887 DEBUG [http-nio-56010-exec-1][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.threadpool.RibbonCommand.metrics.rollingStats.numBuckets to use NEXT property: hystrix.threadpool.default.metrics.rollingStats.numBuckets = 10
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:02,152 DEBUG [http-nio-56010-exec-1][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:02,641 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:02,641 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:02,641 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:02,642 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:02,642 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:02,642 INFO [PollingServerListUpdater-0][ChainedDynamicProperty.java:115] - Flipping property: transaction-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:02,643 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:147] - LoadBalancer [transaction-service_unknown]:  initialized
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:02,647 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:02,647 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:28,186 DEBUG [http-nio-56010-exec-3][HttpServletRequestWrapper.java:229] - Path = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:28,187 DEBUG [http-nio-56010-exec-3][HttpServletRequestWrapper.java:230] - Transfer-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:28,187 DEBUG [http-nio-56010-exec-3][HttpServletRequestWrapper.java:231] - Content-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:28,188 DEBUG [http-nio-56010-exec-3][HttpServletRequestWrapper.java:232] - Content-Length header = -1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:28,190 DEBUG [http-nio-56010-exec-3][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:28,485 DEBUG [http-nio-56010-exec-4][HttpServletRequestWrapper.java:229] - Path = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:28,486 DEBUG [http-nio-56010-exec-4][HttpServletRequestWrapper.java:230] - Transfer-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:28,487 DEBUG [http-nio-56010-exec-4][HttpServletRequestWrapper.java:231] - Content-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:28,487 DEBUG [http-nio-56010-exec-4][HttpServletRequestWrapper.java:232] - Content-Length header = -1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:28,489 DEBUG [http-nio-56010-exec-4][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:32,650 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:32,650 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:32,650 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:32,650 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:32,650 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:32,651 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:23:32,651 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:24:02,651 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:24:02,651 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:24:02,651 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:24:02,651 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:24:02,652 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:24:02,652 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:24:02,652 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:24:32,654 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:24:32,654 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:24:32,654 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:24:32,654 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:24:32,655 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:24:32,655 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:24:32,655 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:25:02,657 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:25:02,657 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:25:02,657 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:25:02,658 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:25:02,658 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:25:02,658 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:25:02,658 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:25:32,659 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:25:32,659 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:25:32,659 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:25:32,659 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:25:32,660 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:25:32,660 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:25:32,660 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:26:02,662 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:26:02,662 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:26:02,662 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:26:02,662 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:26:02,663 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:26:02,663 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:26:02,663 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:26:32,664 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:26:32,664 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:26:32,664 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:26:32,664 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:26:32,665 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:26:32,665 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:26:32,665 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:27:02,666 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:27:02,666 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:27:02,666 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:27:02,666 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:27:02,666 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:27:02,667 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:27:02,667 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:27:32,668 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:27:32,668 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:27:32,668 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:27:32,668 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:27:32,669 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:27:32,669 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:27:32,669 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:28:02,670 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:28:02,670 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:28:02,670 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:28:02,670 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:28:02,671 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:28:02,671 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:28:02,671 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:28:32,672 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:28:32,672 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:28:32,672 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:28:32,672 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:28:32,673 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:28:32,673 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:28:32,673 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:29:02,674 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:29:02,674 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:29:02,674 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:29:02,674 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:29:02,674 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:29:02,675 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:29:02,675 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:29:32,677 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:29:32,677 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:29:32,677 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:29:32,677 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:29:32,678 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:29:32,678 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:29:32,678 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:30:02,680 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:30:02,680 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:30:02,680 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:30:02,680 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:30:02,681 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:30:02,681 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:30:02,681 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:30:32,682 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:30:32,682 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:30:32,682 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:30:32,682 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:30:32,682 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:30:32,683 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:30:32,683 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:31:02,684 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:31:02,684 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:31:02,684 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:31:02,684 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:31:02,685 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:31:02,685 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:31:02,685 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:31:32,687 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:31:32,687 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:31:32,688 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:31:32,688 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:31:32,689 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:31:32,689 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:31:32,689 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:32:02,690 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:32:02,690 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:32:02,690 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:32:02,690 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:32:02,691 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:32:32,693 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:32:32,693 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:32:32,693 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:32:32,693 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:32:32,693 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:02,695 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:02,695 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:02,695 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:02,696 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:02,696 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:32,697 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:32,697 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:32,697 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:32,697 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:32,697 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:32,698 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:32,698 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,306 DEBUG [http-nio-56010-exec-8][HttpServletRequestWrapper.java:229] - Path = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,307 DEBUG [http-nio-56010-exec-8][HttpServletRequestWrapper.java:230] - Transfer-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,307 DEBUG [http-nio-56010-exec-8][HttpServletRequestWrapper.java:231] - Content-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,307 DEBUG [http-nio-56010-exec-8][HttpServletRequestWrapper.java:232] - Content-Length header = -1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,366 DEBUG [http-nio-56010-exec-8][ZoneAffinityServerListFilter.java:83] - ZoneAffinity is set to false
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,367 DEBUG [http-nio-56010-exec-8][ZoneAffinityServerListFilter.java:93] - activeReqeustsPerServerThreshold: 0.6
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,368 DEBUG [http-nio-56010-exec-8][ZoneAffinityServerListFilter.java:95] - blackOutServerPercentageThreshold: 0.8
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,369 DEBUG [http-nio-56010-exec-8][ZoneAffinityServerListFilter.java:97] - availableServersThreshold: 2
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,371 INFO [http-nio-56010-exec-8][ChainedDynamicProperty.java:115] - Flipping property: merchant-application.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,373 DEBUG [http-nio-56010-exec-8][BaseLoadBalancer.java:338] - LoadBalancer [merchant-application]:  pingIntervalSeconds set to 30
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,373 DEBUG [http-nio-56010-exec-8][BaseLoadBalancer.java:356] - LoadBalancer [merchant-application]: maxTotalPingTime set to 2
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,374 INFO [http-nio-56010-exec-8][BaseLoadBalancer.java:197] - Client: merchant-application instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=merchant-application,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,376 INFO [http-nio-56010-exec-8][DynamicServerListLoadBalancer.java:222] - Using serverListUpdater PollingServerListUpdater
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,384 DEBUG [http-nio-56010-exec-8][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,385 DEBUG [http-nio-56010-exec-8][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,385 DEBUG [http-nio-56010-exec-8][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,386 DEBUG [http-nio-56010-exec-8][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,387 DEBUG [http-nio-56010-exec-8][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,388 INFO [http-nio-56010-exec-8][ChainedDynamicProperty.java:115] - Flipping property: merchant-application.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,389 DEBUG [http-nio-56010-exec-8][BaseLoadBalancer.java:147] - LoadBalancer [merchant-application_unknown]:  initialized
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,390 DEBUG [http-nio-56010-exec-8][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,391 DEBUG [http-nio-56010-exec-8][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,392 INFO [http-nio-56010-exec-8][DynamicServerListLoadBalancer.java:150] - DynamicServerListLoadBalancer for client merchant-application initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=merchant-application,current list of Servers=[192.168.1.6:57010],Load balancer stats=Zone stats: {unknown=[Zone:unknown;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:192.168.1.6:57010;	Zone:UNKNOWN;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 CST 1970;	First connection made: Thu Jan 01 08:00:00 CST 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@2b35b95
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,405 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.circuitBreaker.enabled to use NEXT property: hystrix.command.default.circuitBreaker.enabled = true
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,405 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.circuitBreaker.requestVolumeThreshold to use NEXT property: hystrix.command.default.circuitBreaker.requestVolumeThreshold = 20
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,406 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.circuitBreaker.sleepWindowInMilliseconds to use NEXT property: hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds = 5000
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,406 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.circuitBreaker.errorThresholdPercentage to use NEXT property: hystrix.command.default.circuitBreaker.errorThresholdPercentage = 50
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,406 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.circuitBreaker.forceOpen to use NEXT property: hystrix.command.default.circuitBreaker.forceOpen = false
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,407 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.circuitBreaker.forceClosed to use NEXT property: hystrix.command.default.circuitBreaker.forceClosed = false
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,407 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:90] - Flipping property: hystrix.command.merchant-application.execution.isolation.strategy to use its current value: SEMAPHORE
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,408 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:90] - Flipping property: hystrix.command.merchant-application.execution.isolation.thread.timeoutInMilliseconds to use its current value: 93000
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,408 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.execution.timeout.enabled to use NEXT property: hystrix.command.default.execution.timeout.enabled = true
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,409 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.execution.isolation.thread.interruptOnTimeout to use NEXT property: hystrix.command.default.execution.isolation.thread.interruptOnTimeout = true
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,409 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.execution.isolation.thread.interruptOnFutureCancel to use NEXT property: hystrix.command.default.execution.isolation.thread.interruptOnFutureCancel = false
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,409 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:90] - Flipping property: hystrix.command.merchant-application.execution.isolation.semaphore.maxConcurrentRequests to use its current value: 100
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,410 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.fallback.isolation.semaphore.maxConcurrentRequests to use NEXT property: hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests = 10
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,411 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.fallback.enabled to use NEXT property: hystrix.command.default.fallback.enabled = true
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,411 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.metrics.rollingStats.timeInMilliseconds to use NEXT property: hystrix.command.default.metrics.rollingStats.timeInMilliseconds = 10000
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,411 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.metrics.rollingStats.numBuckets to use NEXT property: hystrix.command.default.metrics.rollingStats.numBuckets = 10
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,412 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.metrics.rollingPercentile.enabled to use NEXT property: hystrix.command.default.metrics.rollingPercentile.enabled = true
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,412 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.metrics.rollingPercentile.timeInMilliseconds to use NEXT property: hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds = 60000
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,420 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.metrics.rollingPercentile.numBuckets to use NEXT property: hystrix.command.default.metrics.rollingPercentile.numBuckets = 6
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,421 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.metrics.rollingPercentile.bucketSize to use NEXT property: hystrix.command.default.metrics.rollingPercentile.bucketSize = 100
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,421 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.metrics.healthSnapshot.intervalInMilliseconds to use NEXT property: hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds = 500
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,422 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.requestCache.enabled to use NEXT property: hystrix.command.default.requestCache.enabled = true
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,422 DEBUG [http-nio-56010-exec-8][HystrixPropertiesChainedProperty.java:93] - Flipping property: hystrix.command.merchant-application.requestLog.enabled to use NEXT property: hystrix.command.default.requestLog.enabled = true
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:41,435 DEBUG [http-nio-56010-exec-8][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:42,378 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:42,378 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:42,378 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:42,378 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:42,378 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:42,378 INFO [PollingServerListUpdater-0][ChainedDynamicProperty.java:115] - Flipping property: merchant-application.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:42,378 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:147] - LoadBalancer [merchant-application_unknown]:  initialized
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:42,379 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:33:42,379 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:02,699 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:02,699 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:02,699 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:02,699 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:02,700 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:02,700 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:02,700 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:12,380 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:12,380 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:12,380 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:12,380 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:12,380 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:12,381 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:12,381 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:32,701 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:32,701 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:32,701 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:32,701 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:32,701 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:32,701 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:32,701 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:42,383 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:42,383 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:42,383 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:42,383 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:42,383 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:42,383 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:34:42,383 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:02,704 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:02,704 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:02,704 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:02,704 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:02,704 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:02,705 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:02,705 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:12,071 DEBUG [http-nio-56010-exec-1][HttpServletRequestWrapper.java:229] - Path = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:12,071 DEBUG [http-nio-56010-exec-1][HttpServletRequestWrapper.java:230] - Transfer-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:12,071 DEBUG [http-nio-56010-exec-1][HttpServletRequestWrapper.java:231] - Content-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:12,071 DEBUG [http-nio-56010-exec-1][HttpServletRequestWrapper.java:232] - Content-Length header = -1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:12,073 DEBUG [http-nio-56010-exec-1][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:12,386 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:12,386 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:12,387 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:12,387 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:12,387 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:12,387 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:12,387 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:15,160 DEBUG [http-nio-56010-exec-3][HttpServletRequestWrapper.java:229] - Path = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:15,161 DEBUG [http-nio-56010-exec-3][HttpServletRequestWrapper.java:230] - Transfer-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:15,161 DEBUG [http-nio-56010-exec-3][HttpServletRequestWrapper.java:231] - Content-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:15,161 DEBUG [http-nio-56010-exec-3][HttpServletRequestWrapper.java:232] - Content-Length header = -1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:15,163 DEBUG [http-nio-56010-exec-3][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:32,706 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:32,706 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:32,706 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:32,706 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:32,707 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:32,707 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:32,707 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:42,389 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:42,389 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:42,389 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:42,389 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:42,390 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:42,390 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:35:42,390 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:00,457 DEBUG [http-nio-56010-exec-5][HttpServletRequestWrapper.java:229] - Path = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:00,458 DEBUG [http-nio-56010-exec-5][HttpServletRequestWrapper.java:230] - Transfer-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:00,458 DEBUG [http-nio-56010-exec-5][HttpServletRequestWrapper.java:231] - Content-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:00,458 DEBUG [http-nio-56010-exec-5][HttpServletRequestWrapper.java:232] - Content-Length header = -1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:00,460 DEBUG [http-nio-56010-exec-5][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:02,707 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:02,707 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:02,707 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:02,707 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:02,707 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:02,707 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:02,707 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:12,390 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:12,390 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:12,390 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:12,390 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:12,390 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:12,390 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:12,390 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:32,710 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:32,710 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:32,710 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:32,710 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:32,710 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:32,710 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:32,711 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:42,391 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:42,391 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:42,391 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:42,391 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:42,391 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:42,391 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:36:42,391 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:02,712 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:02,712 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:02,712 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:02,712 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:02,712 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:12,393 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:12,393 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:12,393 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:12,393 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:12,393 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:12,394 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:12,394 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:19,626 DEBUG [http-nio-56010-exec-6][HttpServletRequestWrapper.java:229] - Path = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:19,626 DEBUG [http-nio-56010-exec-6][HttpServletRequestWrapper.java:230] - Transfer-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:19,627 DEBUG [http-nio-56010-exec-6][HttpServletRequestWrapper.java:231] - Content-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:19,627 DEBUG [http-nio-56010-exec-6][HttpServletRequestWrapper.java:232] - Content-Length header = -1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:19,628 DEBUG [http-nio-56010-exec-6][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:19,632 DEBUG [http-nio-56010-exec-6][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:19,633 DEBUG [http-nio-56010-exec-6][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:19,638 DEBUG [http-nio-56010-exec-6][AbstractCommand.java:1027] - Error executing HystrixCommand.run(). Proceeding to fallback logic ...
com.netflix.client.ClientException: Load balancer does not have available server for client: transaction-service
	at org.springframework.cloud.netflix.ribbon.support.AbstractLoadBalancingClient.validateServiceInstance(AbstractLoadBalancingClient.java:143)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.lambda$execute$0(RetryableRibbonLoadBalancingHttpClient.java:91)
	at org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:287)
	at org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:180)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.executeWithRetry(RetryableRibbonLoadBalancingHttpClient.java:153)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.execute(RetryableRibbonLoadBalancingHttpClient.java:125)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.execute(RetryableRibbonLoadBalancingHttpClient.java:58)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.run(AbstractRibbonCommand.java:184)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.run(AbstractRibbonCommand.java:51)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:302)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:298)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:48)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:33)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10423)
	at rx.Observable.subscribe(Observable.java:10390)
	at rx.internal.operators.BlockingOperatorToFuture.toFuture(BlockingOperatorToFuture.java:51)
	at rx.observables.BlockingObservable.toFuture(BlockingObservable.java:410)
	at com.netflix.hystrix.HystrixCommand.queue(HystrixCommand.java:378)
	at com.netflix.hystrix.HystrixCommand.execute(HystrixCommand.java:344)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.forward(RibbonRoutingFilter.java:161)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.run(RibbonRoutingFilter.java:114)
	at com.netflix.zuul.ZuulFilter.runFilter(ZuulFilter.java:117)
	at com.netflix.zuul.FilterProcessor.processZuulFilter(FilterProcessor.java:193)
	at com.netflix.zuul.FilterProcessor.runFilters(FilterProcessor.java:157)
	at com.netflix.zuul.FilterProcessor.route(FilterProcessor.java:118)
	at com.netflix.zuul.ZuulRunner.route(ZuulRunner.java:96)
	at com.netflix.zuul.http.ZuulServlet.route(ZuulServlet.java:116)
	at com.netflix.zuul.http.ZuulServlet.service(ZuulServlet.java:81)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:165)
	at org.springframework.cloud.netflix.zuul.web.ZuulController.handleRequest(ZuulController.java:44)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:19,661 DEBUG [http-nio-56010-exec-6][AbstractCommand.java:815] - No fallback for HystrixCommand. 
java.lang.UnsupportedOperationException: No fallback available.
	at com.netflix.hystrix.HystrixCommand.getFallback(HystrixCommand.java:293)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.getFallback(AbstractRibbonCommand.java:207)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.getFallback(AbstractRibbonCommand.java:51)
	at com.netflix.hystrix.HystrixCommand$3.call(HystrixCommand.java:322)
	at com.netflix.hystrix.HystrixCommand$3.call(HystrixCommand.java:318)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.onError(OperatorOnErrorResumeNextViaFunction.java:142)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at com.netflix.hystrix.AbstractCommand$HystrixObservableTimeoutOperator$3.onError(AbstractCommand.java:1194)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at com.netflix.hystrix.AbstractCommand$DeprecatedOnRunHookApplication$1.onError(AbstractCommand.java:1431)
	at com.netflix.hystrix.AbstractCommand$ExecutionHookApplication$1.onError(AbstractCommand.java:1362)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:44)
	at rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:28)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:48)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:33)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10423)
	at rx.Observable.subscribe(Observable.java:10390)
	at rx.internal.operators.BlockingOperatorToFuture.toFuture(BlockingOperatorToFuture.java:51)
	at rx.observables.BlockingObservable.toFuture(BlockingObservable.java:410)
	at com.netflix.hystrix.HystrixCommand.queue(HystrixCommand.java:378)
	at com.netflix.hystrix.HystrixCommand.execute(HystrixCommand.java:344)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.forward(RibbonRoutingFilter.java:161)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.run(RibbonRoutingFilter.java:114)
	at com.netflix.zuul.ZuulFilter.runFilter(ZuulFilter.java:117)
	at com.netflix.zuul.FilterProcessor.processZuulFilter(FilterProcessor.java:193)
	at com.netflix.zuul.FilterProcessor.runFilters(FilterProcessor.java:157)
	at com.netflix.zuul.FilterProcessor.route(FilterProcessor.java:118)
	at com.netflix.zuul.ZuulRunner.route(ZuulRunner.java:96)
	at com.netflix.zuul.http.ZuulServlet.route(ZuulServlet.java:116)
	at com.netflix.zuul.http.ZuulServlet.service(ZuulServlet.java:81)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:165)
	at org.springframework.cloud.netflix.zuul.web.ZuulController.handleRequest(ZuulController.java:44)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:19,673 WARN [http-nio-56010-exec-6][SendErrorFilter.java:81] - Error during filtering
com.netflix.zuul.exception.ZuulException: Forwarding error
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.handleException(RibbonRoutingFilter.java:191)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.forward(RibbonRoutingFilter.java:166)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.run(RibbonRoutingFilter.java:114)
	at com.netflix.zuul.ZuulFilter.runFilter(ZuulFilter.java:117)
	at com.netflix.zuul.FilterProcessor.processZuulFilter(FilterProcessor.java:193)
	at com.netflix.zuul.FilterProcessor.runFilters(FilterProcessor.java:157)
	at com.netflix.zuul.FilterProcessor.route(FilterProcessor.java:118)
	at com.netflix.zuul.ZuulRunner.route(ZuulRunner.java:96)
	at com.netflix.zuul.http.ZuulServlet.route(ZuulServlet.java:116)
	at com.netflix.zuul.http.ZuulServlet.service(ZuulServlet.java:81)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:165)
	at org.springframework.cloud.netflix.zuul.web.ZuulController.handleRequest(ZuulController.java:44)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.netflix.client.ClientException: Load balancer does not have available server for client: transaction-service
	at org.springframework.cloud.netflix.ribbon.support.AbstractLoadBalancingClient.validateServiceInstance(AbstractLoadBalancingClient.java:143)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.lambda$execute$0(RetryableRibbonLoadBalancingHttpClient.java:91)
	at org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:287)
	at org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:180)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.executeWithRetry(RetryableRibbonLoadBalancingHttpClient.java:153)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.execute(RetryableRibbonLoadBalancingHttpClient.java:125)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.execute(RetryableRibbonLoadBalancingHttpClient.java:58)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.run(AbstractRibbonCommand.java:184)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.run(AbstractRibbonCommand.java:51)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:302)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:298)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:48)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:33)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10423)
	at rx.Observable.subscribe(Observable.java:10390)
	at rx.internal.operators.BlockingOperatorToFuture.toFuture(BlockingOperatorToFuture.java:51)
	at rx.observables.BlockingObservable.toFuture(BlockingObservable.java:410)
	at com.netflix.hystrix.HystrixCommand.queue(HystrixCommand.java:378)
	at com.netflix.hystrix.HystrixCommand.execute(HystrixCommand.java:344)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.forward(RibbonRoutingFilter.java:161)
	... 100 more
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:32,714 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:32,714 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:32,714 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:32,714 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:32,714 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:42,395 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:42,395 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:42,395 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:42,395 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:42,395 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:42,395 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:37:42,395 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:02,717 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:02,717 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:02,717 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:02,717 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:02,717 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:02,717 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:02,718 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:12,398 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:12,398 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:12,398 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:12,398 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:12,398 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:12,398 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:12,398 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:12,474 DEBUG [http-nio-56010-exec-8][HttpServletRequestWrapper.java:229] - Path = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:12,475 DEBUG [http-nio-56010-exec-8][HttpServletRequestWrapper.java:230] - Transfer-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:12,475 DEBUG [http-nio-56010-exec-8][HttpServletRequestWrapper.java:231] - Content-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:12,475 DEBUG [http-nio-56010-exec-8][HttpServletRequestWrapper.java:232] - Content-Length header = -1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:12,476 DEBUG [http-nio-56010-exec-8][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:32,718 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:32,718 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:32,718 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:32,718 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:32,718 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:32,719 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:32,719 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:40,863 DEBUG [http-nio-56010-exec-8][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:42,400 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:42,400 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:42,400 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:42,400 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:42,400 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:42,401 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:42,401 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:44,883 DEBUG [http-nio-56010-exec-8][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:44,884 DEBUG [http-nio-56010-exec-8][AbstractCommand.java:1027] - Error executing HystrixCommand.run(). Proceeding to fallback logic ...
org.apache.http.conn.HttpHostConnectException: Connect to 192.168.1.6:56050 [/192.168.1.6] failed: Connection refused: connect
	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:156)
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:374)
	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:393)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:185)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:89)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:108)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.lambda$execute$0(RetryableRibbonLoadBalancingHttpClient.java:109)
	at org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:287)
	at org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:180)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.executeWithRetry(RetryableRibbonLoadBalancingHttpClient.java:153)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.execute(RetryableRibbonLoadBalancingHttpClient.java:125)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.execute(RetryableRibbonLoadBalancingHttpClient.java:58)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.run(AbstractRibbonCommand.java:184)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.run(AbstractRibbonCommand.java:51)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:302)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:298)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:48)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:33)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10423)
	at rx.Observable.subscribe(Observable.java:10390)
	at rx.internal.operators.BlockingOperatorToFuture.toFuture(BlockingOperatorToFuture.java:51)
	at rx.observables.BlockingObservable.toFuture(BlockingObservable.java:410)
	at com.netflix.hystrix.HystrixCommand.queue(HystrixCommand.java:378)
	at com.netflix.hystrix.HystrixCommand.execute(HystrixCommand.java:344)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.forward(RibbonRoutingFilter.java:161)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.run(RibbonRoutingFilter.java:114)
	at com.netflix.zuul.ZuulFilter.runFilter(ZuulFilter.java:117)
	at com.netflix.zuul.FilterProcessor.processZuulFilter(FilterProcessor.java:193)
	at com.netflix.zuul.FilterProcessor.runFilters(FilterProcessor.java:157)
	at com.netflix.zuul.FilterProcessor.route(FilterProcessor.java:118)
	at com.netflix.zuul.ZuulRunner.route(ZuulRunner.java:96)
	at com.netflix.zuul.http.ZuulServlet.route(ZuulServlet.java:116)
	at com.netflix.zuul.http.ZuulServlet.service(ZuulServlet.java:81)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:165)
	at org.springframework.cloud.netflix.zuul.web.ZuulController.handleRequest(ZuulController.java:44)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:81)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:162)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at org.apache.http.conn.socket.PlainConnectionSocketFactory.connectSocket(PlainConnectionSocketFactory.java:75)
	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:142)
	... 176 more
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:44,889 DEBUG [http-nio-56010-exec-8][AbstractCommand.java:815] - No fallback for HystrixCommand. 
java.lang.UnsupportedOperationException: No fallback available.
	at com.netflix.hystrix.HystrixCommand.getFallback(HystrixCommand.java:293)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.getFallback(AbstractRibbonCommand.java:207)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.getFallback(AbstractRibbonCommand.java:51)
	at com.netflix.hystrix.HystrixCommand$3.call(HystrixCommand.java:322)
	at com.netflix.hystrix.HystrixCommand$3.call(HystrixCommand.java:318)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.onError(OperatorOnErrorResumeNextViaFunction.java:142)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at com.netflix.hystrix.AbstractCommand$HystrixObservableTimeoutOperator$3.onError(AbstractCommand.java:1194)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at com.netflix.hystrix.AbstractCommand$DeprecatedOnRunHookApplication$1.onError(AbstractCommand.java:1431)
	at com.netflix.hystrix.AbstractCommand$ExecutionHookApplication$1.onError(AbstractCommand.java:1362)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:44)
	at rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:28)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:48)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:33)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10423)
	at rx.Observable.subscribe(Observable.java:10390)
	at rx.internal.operators.BlockingOperatorToFuture.toFuture(BlockingOperatorToFuture.java:51)
	at rx.observables.BlockingObservable.toFuture(BlockingObservable.java:410)
	at com.netflix.hystrix.HystrixCommand.queue(HystrixCommand.java:378)
	at com.netflix.hystrix.HystrixCommand.execute(HystrixCommand.java:344)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.forward(RibbonRoutingFilter.java:161)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.run(RibbonRoutingFilter.java:114)
	at com.netflix.zuul.ZuulFilter.runFilter(ZuulFilter.java:117)
	at com.netflix.zuul.FilterProcessor.processZuulFilter(FilterProcessor.java:193)
	at com.netflix.zuul.FilterProcessor.runFilters(FilterProcessor.java:157)
	at com.netflix.zuul.FilterProcessor.route(FilterProcessor.java:118)
	at com.netflix.zuul.ZuulRunner.route(ZuulRunner.java:96)
	at com.netflix.zuul.http.ZuulServlet.route(ZuulServlet.java:116)
	at com.netflix.zuul.http.ZuulServlet.service(ZuulServlet.java:81)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:165)
	at org.springframework.cloud.netflix.zuul.web.ZuulController.handleRequest(ZuulController.java:44)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:38:44,897 WARN [http-nio-56010-exec-8][SendErrorFilter.java:81] - Error during filtering
com.netflix.zuul.exception.ZuulException: Forwarding error
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.handleException(RibbonRoutingFilter.java:191)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.forward(RibbonRoutingFilter.java:166)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.run(RibbonRoutingFilter.java:114)
	at com.netflix.zuul.ZuulFilter.runFilter(ZuulFilter.java:117)
	at com.netflix.zuul.FilterProcessor.processZuulFilter(FilterProcessor.java:193)
	at com.netflix.zuul.FilterProcessor.runFilters(FilterProcessor.java:157)
	at com.netflix.zuul.FilterProcessor.route(FilterProcessor.java:118)
	at com.netflix.zuul.ZuulRunner.route(ZuulRunner.java:96)
	at com.netflix.zuul.http.ZuulServlet.route(ZuulServlet.java:116)
	at com.netflix.zuul.http.ZuulServlet.service(ZuulServlet.java:81)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:165)
	at org.springframework.cloud.netflix.zuul.web.ZuulController.handleRequest(ZuulController.java:44)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.netflix.hystrix.exception.HystrixRuntimeException: transaction-service failed and no fallback available.
	at com.netflix.hystrix.AbstractCommand$22.call(AbstractCommand.java:822)
	at com.netflix.hystrix.AbstractCommand$22.call(AbstractCommand.java:807)
	at rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.onError(OperatorOnErrorResumeNextViaFunction.java:140)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at com.netflix.hystrix.AbstractCommand$DeprecatedOnFallbackHookApplication$1.onError(AbstractCommand.java:1472)
	at com.netflix.hystrix.AbstractCommand$FallbackHookApplication$1.onError(AbstractCommand.java:1397)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:44)
	at rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:28)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.onError(OperatorOnErrorResumeNextViaFunction.java:142)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at com.netflix.hystrix.AbstractCommand$HystrixObservableTimeoutOperator$3.onError(AbstractCommand.java:1194)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at com.netflix.hystrix.AbstractCommand$DeprecatedOnRunHookApplication$1.onError(AbstractCommand.java:1431)
	at com.netflix.hystrix.AbstractCommand$ExecutionHookApplication$1.onError(AbstractCommand.java:1362)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:44)
	at rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:28)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:48)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:33)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10423)
	at rx.Observable.subscribe(Observable.java:10390)
	at rx.internal.operators.BlockingOperatorToFuture.toFuture(BlockingOperatorToFuture.java:51)
	at rx.observables.BlockingObservable.toFuture(BlockingObservable.java:410)
	at com.netflix.hystrix.HystrixCommand.queue(HystrixCommand.java:378)
	at com.netflix.hystrix.HystrixCommand.execute(HystrixCommand.java:344)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.forward(RibbonRoutingFilter.java:161)
	... 100 more
Caused by: org.apache.http.conn.HttpHostConnectException: Connect to 192.168.1.6:56050 [/192.168.1.6] failed: Connection refused: connect
	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:156)
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:374)
	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:393)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:185)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:89)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:108)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.lambda$execute$0(RetryableRibbonLoadBalancingHttpClient.java:109)
	at org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:287)
	at org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:180)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.executeWithRetry(RetryableRibbonLoadBalancingHttpClient.java:153)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.execute(RetryableRibbonLoadBalancingHttpClient.java:125)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.execute(RetryableRibbonLoadBalancingHttpClient.java:58)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.run(AbstractRibbonCommand.java:184)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.run(AbstractRibbonCommand.java:51)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:302)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:298)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)
	... 157 more
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:81)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:476)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:218)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:200)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:162)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:394)
	at java.net.Socket.connect(Socket.java:606)
	at org.apache.http.conn.socket.PlainConnectionSocketFactory.connectSocket(PlainConnectionSocketFactory.java:75)
	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:142)
	... 176 more
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:02,720 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:02,720 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:02,720 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:02,720 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:02,720 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:02,720 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:02,721 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:12,404 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:12,404 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:12,404 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:12,404 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:12,404 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:12,404 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:12,404 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:32,721 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:32,721 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:32,721 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:32,721 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:32,721 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:32,722 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:32,722 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:42,407 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:42,407 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:42,407 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:42,407 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:42,408 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:42,408 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:39:42,408 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:02,723 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:02,723 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:02,723 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:02,723 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:02,723 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:02,724 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:02,724 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:12,409 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:12,409 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:12,409 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:12,409 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:12,409 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:12,409 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:12,410 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:32,725 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:32,725 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:32,725 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:32,725 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:32,725 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:32,725 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:32,725 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:42,411 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:42,411 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:42,411 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:42,411 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:42,412 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:42,412 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:40:42,412 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:02,726 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:02,726 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:02,726 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:02,726 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:02,726 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:02,726 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:02,726 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:07,372 DEBUG [http-nio-56010-exec-1][HttpServletRequestWrapper.java:229] - Path = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:07,372 DEBUG [http-nio-56010-exec-1][HttpServletRequestWrapper.java:230] - Transfer-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:07,372 DEBUG [http-nio-56010-exec-1][HttpServletRequestWrapper.java:231] - Content-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:07,373 DEBUG [http-nio-56010-exec-1][HttpServletRequestWrapper.java:232] - Content-Length header = -1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:07,375 DEBUG [http-nio-56010-exec-1][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:12,415 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:12,415 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:12,415 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:12,415 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:12,415 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:12,415 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:12,415 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:32,728 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:32,728 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:32,728 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:32,728 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:32,728 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:32,728 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:32,728 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:42,417 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:42,417 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:42,417 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:42,417 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:42,417 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:42,417 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:42,417 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:41:47,380 DEBUG [http-nio-56010-exec-1][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:02,728 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:02,728 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:02,728 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:02,728 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:02,728 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:02,729 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:02,729 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:12,420 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:12,420 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:12,420 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:12,420 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:12,420 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:12,420 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:12,420 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:27,389 DEBUG [http-nio-56010-exec-1][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:27,389 DEBUG [http-nio-56010-exec-1][AbstractCommand.java:1027] - Error executing HystrixCommand.run(). Proceeding to fallback logic ...
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:171)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:137)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:153)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:280)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:138)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:56)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:259)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:163)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:157)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:273)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:125)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:272)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:185)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:89)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:108)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.lambda$execute$0(RetryableRibbonLoadBalancingHttpClient.java:109)
	at org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:287)
	at org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:180)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.executeWithRetry(RetryableRibbonLoadBalancingHttpClient.java:153)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.execute(RetryableRibbonLoadBalancingHttpClient.java:125)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.execute(RetryableRibbonLoadBalancingHttpClient.java:58)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.run(AbstractRibbonCommand.java:184)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.run(AbstractRibbonCommand.java:51)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:302)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:298)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:48)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:33)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10423)
	at rx.Observable.subscribe(Observable.java:10390)
	at rx.internal.operators.BlockingOperatorToFuture.toFuture(BlockingOperatorToFuture.java:51)
	at rx.observables.BlockingObservable.toFuture(BlockingObservable.java:410)
	at com.netflix.hystrix.HystrixCommand.queue(HystrixCommand.java:378)
	at com.netflix.hystrix.HystrixCommand.execute(HystrixCommand.java:344)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.forward(RibbonRoutingFilter.java:161)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.run(RibbonRoutingFilter.java:114)
	at com.netflix.zuul.ZuulFilter.runFilter(ZuulFilter.java:117)
	at com.netflix.zuul.FilterProcessor.processZuulFilter(FilterProcessor.java:193)
	at com.netflix.zuul.FilterProcessor.runFilters(FilterProcessor.java:157)
	at com.netflix.zuul.FilterProcessor.route(FilterProcessor.java:118)
	at com.netflix.zuul.ZuulRunner.route(ZuulRunner.java:96)
	at com.netflix.zuul.http.ZuulServlet.route(ZuulServlet.java:116)
	at com.netflix.zuul.http.ZuulServlet.service(ZuulServlet.java:81)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:165)
	at org.springframework.cloud.netflix.zuul.web.ZuulController.handleRequest(ZuulController.java:44)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:27,393 DEBUG [http-nio-56010-exec-1][AbstractCommand.java:815] - No fallback for HystrixCommand. 
java.lang.UnsupportedOperationException: No fallback available.
	at com.netflix.hystrix.HystrixCommand.getFallback(HystrixCommand.java:293)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.getFallback(AbstractRibbonCommand.java:207)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.getFallback(AbstractRibbonCommand.java:51)
	at com.netflix.hystrix.HystrixCommand$3.call(HystrixCommand.java:322)
	at com.netflix.hystrix.HystrixCommand$3.call(HystrixCommand.java:318)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.onError(OperatorOnErrorResumeNextViaFunction.java:142)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at com.netflix.hystrix.AbstractCommand$HystrixObservableTimeoutOperator$3.onError(AbstractCommand.java:1194)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at com.netflix.hystrix.AbstractCommand$DeprecatedOnRunHookApplication$1.onError(AbstractCommand.java:1431)
	at com.netflix.hystrix.AbstractCommand$ExecutionHookApplication$1.onError(AbstractCommand.java:1362)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:44)
	at rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:28)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:48)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:33)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10423)
	at rx.Observable.subscribe(Observable.java:10390)
	at rx.internal.operators.BlockingOperatorToFuture.toFuture(BlockingOperatorToFuture.java:51)
	at rx.observables.BlockingObservable.toFuture(BlockingObservable.java:410)
	at com.netflix.hystrix.HystrixCommand.queue(HystrixCommand.java:378)
	at com.netflix.hystrix.HystrixCommand.execute(HystrixCommand.java:344)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.forward(RibbonRoutingFilter.java:161)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.run(RibbonRoutingFilter.java:114)
	at com.netflix.zuul.ZuulFilter.runFilter(ZuulFilter.java:117)
	at com.netflix.zuul.FilterProcessor.processZuulFilter(FilterProcessor.java:193)
	at com.netflix.zuul.FilterProcessor.runFilters(FilterProcessor.java:157)
	at com.netflix.zuul.FilterProcessor.route(FilterProcessor.java:118)
	at com.netflix.zuul.ZuulRunner.route(ZuulRunner.java:96)
	at com.netflix.zuul.http.ZuulServlet.route(ZuulServlet.java:116)
	at com.netflix.zuul.http.ZuulServlet.service(ZuulServlet.java:81)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:165)
	at org.springframework.cloud.netflix.zuul.web.ZuulController.handleRequest(ZuulController.java:44)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:27,402 WARN [http-nio-56010-exec-1][SendErrorFilter.java:81] - Error during filtering
com.netflix.zuul.exception.ZuulException: Forwarding error
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.handleException(RibbonRoutingFilter.java:191)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.forward(RibbonRoutingFilter.java:166)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.run(RibbonRoutingFilter.java:114)
	at com.netflix.zuul.ZuulFilter.runFilter(ZuulFilter.java:117)
	at com.netflix.zuul.FilterProcessor.processZuulFilter(FilterProcessor.java:193)
	at com.netflix.zuul.FilterProcessor.runFilters(FilterProcessor.java:157)
	at com.netflix.zuul.FilterProcessor.route(FilterProcessor.java:118)
	at com.netflix.zuul.ZuulRunner.route(ZuulRunner.java:96)
	at com.netflix.zuul.http.ZuulServlet.route(ZuulServlet.java:116)
	at com.netflix.zuul.http.ZuulServlet.service(ZuulServlet.java:81)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:165)
	at org.springframework.cloud.netflix.zuul.web.ZuulController.handleRequest(ZuulController.java:44)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.netflix.hystrix.exception.HystrixRuntimeException: transaction-service failed and no fallback available.
	at com.netflix.hystrix.AbstractCommand$22.call(AbstractCommand.java:822)
	at com.netflix.hystrix.AbstractCommand$22.call(AbstractCommand.java:807)
	at rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.onError(OperatorOnErrorResumeNextViaFunction.java:140)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at com.netflix.hystrix.AbstractCommand$DeprecatedOnFallbackHookApplication$1.onError(AbstractCommand.java:1472)
	at com.netflix.hystrix.AbstractCommand$FallbackHookApplication$1.onError(AbstractCommand.java:1397)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:44)
	at rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:28)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.onError(OperatorOnErrorResumeNextViaFunction.java:142)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)
	at com.netflix.hystrix.AbstractCommand$HystrixObservableTimeoutOperator$3.onError(AbstractCommand.java:1194)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at com.netflix.hystrix.AbstractCommand$DeprecatedOnRunHookApplication$1.onError(AbstractCommand.java:1431)
	at com.netflix.hystrix.AbstractCommand$ExecutionHookApplication$1.onError(AbstractCommand.java:1362)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at rx.observers.Subscribers$5.onError(Subscribers.java:230)
	at rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:44)
	at rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:28)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:48)
	at rx.internal.operators.OnSubscribeMap.call(OnSubscribeMap.java:33)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10327)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10423)
	at rx.Observable.subscribe(Observable.java:10390)
	at rx.internal.operators.BlockingOperatorToFuture.toFuture(BlockingOperatorToFuture.java:51)
	at rx.observables.BlockingObservable.toFuture(BlockingObservable.java:410)
	at com.netflix.hystrix.HystrixCommand.queue(HystrixCommand.java:378)
	at com.netflix.hystrix.HystrixCommand.execute(HystrixCommand.java:344)
	at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.forward(RibbonRoutingFilter.java:161)
	... 100 more
Caused by: java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:171)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:137)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:153)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:280)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:138)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:56)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:259)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:163)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:157)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:273)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:125)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:272)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:185)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:89)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:108)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.lambda$execute$0(RetryableRibbonLoadBalancingHttpClient.java:109)
	at org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:287)
	at org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:180)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.executeWithRetry(RetryableRibbonLoadBalancingHttpClient.java:153)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.execute(RetryableRibbonLoadBalancingHttpClient.java:125)
	at org.springframework.cloud.netflix.ribbon.apache.RetryableRibbonLoadBalancingHttpClient.execute(RetryableRibbonLoadBalancingHttpClient.java:58)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.run(AbstractRibbonCommand.java:184)
	at org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand.run(AbstractRibbonCommand.java:51)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:302)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:298)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)
	... 157 more
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:32,730 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:32,730 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:32,730 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:32,730 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:32,730 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:32,730 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:32,730 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:42,421 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:42,421 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:42,421 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:42,421 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:42,421 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:42,421 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:42:42,421 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:02,731 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:02,731 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:02,731 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:02,731 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:02,731 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:02,731 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:02,732 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:12,422 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:12,422 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:12,422 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:12,423 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:12,423 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:12,423 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:12,423 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:32,733 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:32,733 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:32,733 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:32,733 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:32,733 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:42,424 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:42,424 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:42,424 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:42,424 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:42,424 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:42,424 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:43:42,424 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:02,735 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:02,735 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:02,735 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:02,735 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:02,735 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:12,427 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:12,427 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:12,427 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:12,427 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:12,428 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:12,428 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:12,428 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:32,736 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:32,736 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:32,736 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:32,736 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:32,736 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:42,430 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:42,430 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:42,430 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:42,430 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:42,430 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:42,430 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:44:42,430 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:02,739 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:02,739 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:02,739 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:02,739 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:02,739 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:02,739 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:02,740 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:12,432 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:12,432 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:12,432 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:12,432 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:12,432 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:12,433 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:12,433 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:32,740 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:32,740 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:32,740 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:32,740 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:32,740 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:42,433 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:42,433 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:42,433 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:42,433 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:42,433 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:42,434 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:45:42,434 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:02,742 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:02,742 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:02,742 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:02,742 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:02,742 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:12,436 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:12,436 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:12,436 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:12,436 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:12,436 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:12,436 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:12,436 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:32,745 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:32,745 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:32,745 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:32,745 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:32,746 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:42,439 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:42,439 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:42,439 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:42,439 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:42,439 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:42,439 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:46:42,439 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:02,747 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:02,747 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:02,747 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:02,747 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:02,747 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:12,442 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:12,442 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:12,442 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:12,442 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:12,442 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:12,443 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:12,443 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:32,749 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:32,749 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:32,749 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:32,749 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:32,749 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:42,444 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:42,444 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:42,444 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:42,444 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:42,444 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:42,444 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:42,444 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:47:53,574 WARN [com.alibaba.nacos.client.naming.updater][HostReactor.java:110] - out of date data received, old-t: 1625381263568, new-t: 0
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:02,750 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:02,750 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:02,750 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:02,750 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:02,750 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:12,445 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:12,445 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:12,445 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:12,445 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:12,445 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:12,445 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:12,445 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:32,753 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:32,753 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:32,753 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:32,753 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:32,753 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:42,446 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:42,446 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:42,446 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:42,446 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:42,447 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:42,447 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:48:42,447 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:02,756 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:02,756 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:02,756 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:02,756 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:02,756 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:12,448 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:12,448 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:12,448 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:12,448 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:12,448 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:12,449 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:12,449 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:32,758 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:32,758 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:32,758 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:32,758 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:32,758 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:42,451 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:42,451 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:42,451 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:42,451 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:42,451 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:42,451 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:49:42,452 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:02,759 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:02,759 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:02,759 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:02,759 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:02,759 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:12,452 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:12,452 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:12,452 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:12,452 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:12,452 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:12,452 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:12,452 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:32,761 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:32,761 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: []
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:32,761 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:32,761 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:32,761 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:42,453 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:42,453 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:42,453 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:42,453 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:42,453 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:42,453 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:50:42,453 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:02,763 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:02,763 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:02,763 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:02,763 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:02,763 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:02,763 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:02,763 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:12,455 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:12,455 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:12,455 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:12,455 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:12,455 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:12,455 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:12,455 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:32,765 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:32,765 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:32,765 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:32,765 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:32,765 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:32,765 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:32,765 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:42,457 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:42,457 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:42,457 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:42,457 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:42,457 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:42,457 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:51:42,457 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:02,767 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:02,767 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:02,767 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:02,767 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:02,767 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:02,767 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:02,768 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:12,459 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:12,459 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:12,459 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:12,459 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:12,459 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:12,459 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:12,459 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:32,769 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:32,769 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:32,769 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:32,769 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:32,769 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:32,769 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:32,769 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:42,461 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:42,461 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:42,461 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:42,461 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:42,461 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:42,461 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:52:42,462 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:02,771 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:02,771 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:02,771 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:02,771 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:02,771 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:02,771 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:02,771 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:12,462 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:12,462 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:12,462 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:12,462 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:12,462 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:12,462 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:12,463 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:32,772 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:32,772 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:32,772 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:32,772 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:32,772 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:32,772 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:32,772 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:42,464 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:42,464 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:42,464 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:42,464 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:42,464 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:42,464 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:53:42,465 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:02,774 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:02,774 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:02,774 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:02,774 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:02,774 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:02,774 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:02,775 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:12,467 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:12,467 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:12,467 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:12,467 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:12,467 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:12,467 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:12,468 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:32,775 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:32,775 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:32,775 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:32,775 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:32,775 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:32,775 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:32,775 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:42,470 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:42,470 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:42,470 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:42,470 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:42,471 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:42,471 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:54:42,471 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:02,776 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:02,776 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:02,776 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:02,776 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:02,776 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:02,776 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:02,776 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:12,471 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:12,471 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:12,471 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:12,471 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:12,471 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:12,471 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:12,472 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:32,779 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:32,779 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:32,779 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:32,779 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:32,779 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:32,779 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:32,779 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:42,488 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:42,493 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:42,493 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:42,493 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:42,494 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:42,494 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:55:42,494 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:02,781 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:02,781 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:02,781 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:02,781 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:02,781 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:02,781 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:02,781 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:12,496 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:12,496 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:12,496 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:12,496 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:12,496 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:12,496 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:12,496 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:32,782 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:32,782 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:32,782 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:32,782 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:32,782 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:32,782 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:32,782 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:42,498 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:42,498 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:42,498 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:42,498 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:42,498 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:42,498 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:56:42,499 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:02,783 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:02,783 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:02,783 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:02,783 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:02,783 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:02,783 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:02,784 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:12,501 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:12,501 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:12,501 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:12,501 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:12,501 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:12,501 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:12,501 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:32,784 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:32,784 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:32,784 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:32,784 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:32,784 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:32,785 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:32,785 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:42,502 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:42,502 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:42,502 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:42,502 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:42,503 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:42,503 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:42,503 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:50,174 DEBUG [http-nio-56010-exec-6][HttpServletRequestWrapper.java:229] - Path = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:50,175 DEBUG [http-nio-56010-exec-6][HttpServletRequestWrapper.java:230] - Transfer-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:50,175 DEBUG [http-nio-56010-exec-6][HttpServletRequestWrapper.java:231] - Content-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:50,175 DEBUG [http-nio-56010-exec-6][HttpServletRequestWrapper.java:232] - Content-Length header = -1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:57:50,177 DEBUG [http-nio-56010-exec-6][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:02,786 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:02,786 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:02,786 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:02,786 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:02,786 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:02,786 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:02,787 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:12,505 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:12,505 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:12,505 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:12,505 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:12,505 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:12,506 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:12,506 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:32,788 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:32,789 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:32,790 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:32,790 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:32,790 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:32,790 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:32,791 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:42,508 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:42,508 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:42,509 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:42,509 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:42,509 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:42,509 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:58:42,510 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:02,793 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:02,794 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:02,795 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:02,795 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:02,796 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:02,796 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:02,796 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:12,510 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:12,510 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:12,510 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:12,510 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:12,510 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:12,511 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:12,511 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:32,798 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:241] - List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:32,798 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for transaction-service obtained from Discovery client: [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:32,798 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:32,798 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:32,798 DEBUG [PollingServerListUpdater-1][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:56050]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:32,799 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:491] - LoadBalancer [transaction-service_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:32,799 DEBUG [PollingServerListUpdater-1][BaseLoadBalancer.java:507] - LoadBalancer [transaction-service_unknown]:  addServer [192.168.1.6:56050]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:42,513 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:241] - List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:42,513 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:246] - Filtered List of Servers for merchant-application obtained from Discovery client: [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:42,513 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:42,513 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:42,513 DEBUG [PollingServerListUpdater-0][DynamicServerListLoadBalancer.java:179] - Setting server list for zones: {unknown=[192.168.1.6:57010]}
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:42,513 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:491] - LoadBalancer [merchant-application_unknown]: clearing server list (SET op)
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:42,513 DEBUG [PollingServerListUpdater-0][BaseLoadBalancer.java:507] - LoadBalancer [merchant-application_unknown]:  addServer [192.168.1.6:57010]
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:58,499 DEBUG [http-nio-56010-exec-8][HttpServletRequestWrapper.java:229] - Path = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:58,502 DEBUG [http-nio-56010-exec-8][HttpServletRequestWrapper.java:230] - Transfer-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:58,502 DEBUG [http-nio-56010-exec-8][HttpServletRequestWrapper.java:231] - Content-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:58,502 DEBUG [http-nio-56010-exec-8][HttpServletRequestWrapper.java:232] - Content-Length header = -1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:58,513 DEBUG [http-nio-56010-exec-8][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:59,494 DEBUG [http-nio-56010-exec-9][HttpServletRequestWrapper.java:229] - Path = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:59,494 DEBUG [http-nio-56010-exec-9][HttpServletRequestWrapper.java:230] - Transfer-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:59,495 DEBUG [http-nio-56010-exec-9][HttpServletRequestWrapper.java:231] - Content-Encoding = null
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:59,495 DEBUG [http-nio-56010-exec-9][HttpServletRequestWrapper.java:232] - Content-Length header = -1
[shanjupay-gateway-service][${env:SERVER_PORT}] 2021-07-04 14:59:59,496 DEBUG [http-nio-56010-exec-9][ZoneAwareLoadBalancer.java:112] - Zone aware logic disabled or there is only one zone
